{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/error-handling-with-apollo-server/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Tomek's blog","author":"Tomek Fojtuch"}},"markdownRemark":{"id":"412b8302-e46b-5c08-b343-83651a7b6aa4","excerpt":"GraphQL is recently gaining popularity and many organizations are evaluating how they can benefit from GraphQL capabilities in their systems. There is a range…","html":"<p>GraphQL is recently gaining popularity and many organizations are evaluating how they can benefit from GraphQL capabilities in their systems. There is a range of topics to consider while transitioning from REST-based to GraphQL-based system, one of them being error handling. In this post I’d like to share findings related to error handling with Apollo Server and in <a href=\"/blog/error-handling-with-apollo-client/\">next post</a> I’ll cover client side. Error handling capabilities provided by Apollo Server are described in <a href=\"https://www.apollographql.com/docs/apollo-server/data/errors/\">Apollo Server documentation</a> and <a href=\"https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210\">Apollo blog</a>, not repeating information provided there, let’s focus on how we could use those capabilities in a typical use case.</p>\n<p>Our starting point is a REST-based system divided into layers:</p>\n<ul>\n<li>controllers layer - handling HTTP communication</li>\n<li>services layer - implementing business logic</li>\n<li>possibly more layers below the services layer (E.g. model layer handling data access)</li>\n</ul>\n<p>In our current system <a href=\"https://javascript.info/custom-errors#wrapping-exceptions\">Error Wrapping</a> technique is used so that layer above only has to know how to handle errors thrown by layer below with which it directly communicates, without having to be aware of any layers down the stack. In this setup the services layer wraps all errors that are coming from layers below and communicates them to the controllers layer that translates them into an appropriate HTTP code.</p>\n<p>What we want to achieve is to make a transition to GraphQL-based system without reimplementing services layer and layers below, if any. We can do that by either replacing REST controllers with GraphQL resolvers or placing resolvers next to controllers - in case the current REST-based setup should still work. Either way, we want to keep the services layer and layers below intact.</p>\n<p>Let’s group into categories errors that we have to handle:</p>\n<ol>\n<li>System-wide errors, not specific to one service, E.g. error thrown when an unauthenticated user tries to access a non-public resource. This kind of error can be thrown by many different services in our system.</li>\n<li>Service-specific errors, E.g. error thrown by <em>addUser</em> service when provided email has already been registered in our system. This kind of error is limited to one service.</li>\n<li>Unexpected errors - all other errors: i/o errors, bugs in the project or it’s dependencies etc.</li>\n</ol>\n<p>Before we jump into solutions how to handle these error categories let’s shortly cover what Apollo Server capabilities we can use. GraphQL-based systems convey information about errors using <em>errors</em> array, the array contains GraphQL errors serialized on server side and deserialized on client side. Type of an error is lost in the process, so Apollo Server to each error adds <em>extensions</em> object with <em>code</em> property. Value of this property informs the client of type of the error. Apollo server provides several error classes implemented in <a href=\"https://github.com/apollographql/apollo-server/blob/master/packages/apollo-server-errors/src/index.ts\">apollo-server-errors package</a>:</p>\n<ul>\n<li>SyntaxError (extensions.code: <em>GRAPHQL_PARSE_FAILED</em>) - thrown when server receives malformed query: E.g. without closing parenthesis. This type of error never reaches resolvers layer, it is handled by Apollo Server itself.</li>\n<li>ValidationError (extensions.code: <em>GRAPHQL_VALIDATION_FAILED</em>) - thrown when server receives request non-compliant to GraphQL schema: E.g. with non-existent field names. Also handled by Apollo Server itself.</li>\n<li>AuthenticationError (extensions.code: <em>UNAUTHENTICATED</em>) - This error type we can use in our system to inform a client application that the user in unauthenticated.</li>\n<li>ForbiddenError (extensions.code: <em>FORBIDDEN</em>) - We can use it to inform a client application that the user in unauthorized to perform given action.</li>\n<li>UserInputError - We can used it to inform a client application that submitted input is invalid.</li>\n<li>PersistedQueryNotFoundError (extensions.code: <em>PERSISTED_QUERY_NOT_FOUND</em>) - only for persisted queries (more info: <a href=\"https://github.com/apollographql/apollo-link-persisted-queries\">apollo-link-persisted-queries package</a>).</li>\n<li>PersistedQueryNotSupportedError (extensions.code: <em>PERSISTED_QUERY_NOT_SUPPORTED</em>) - also only for persisted queries.</li>\n</ul>\n<p>All the above errors extend ApolloError class (extensions.code: <em>INTERNAL_SERVER_ERROR</em>), which can be used to create our own proprietary classes of errors.</p>\n<p>In subsequent sections let’s see how we can map errors generated by our system to errors provided by Apollo Server.</p>\n<h2>1. Handling system-wide errors</h2>\n<p>Examples of system-wide errors may include:</p>\n<ol>\n<li>error thrown when unauthenticated user tries to access a non-public resource - let’s assume that is such a case our system throws our proprietary UserUnauthenticatedError and we would like to catch it and translate into Apollo’s AuthenticationError for every resolver that may receive it.</li>\n<li>error thrown when an user is authenticated but tries to perform an action without having appropriate rights to do so - let’s assume that in this case the system throws our proprietary UserUnauthorizedError and we want to translate it into Apollo’s ForbiddenError for all resolvers.</li>\n</ol>\n<p>Of course one way to solve it would be to replace proprietary errors with respective Apollo’s errors in all places where these proprietary errors are thrown. But that would mean a lot of changes in existing source code and also current REST-based setup would stop working unless we also re-implement the controllers layer. Another approach could be to put a try/catch clause in every resolver. But this in turn would imply a lot of code repetition. Let’s try different approach and create a higher order function that takes an asynchronous function as a parameter and returns a function with the same signature as provided function. The returned function would invoke the provided function in asynchronous way, surround it by try/catch block and throw Apollo’s AuthenticationError and ForbiddenError instead of our respective proprietary errors. In javascript the higher order function could look like that:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">func</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">funcArgs</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk14\">await</span><span class=\"mtk1\"> </span><span class=\"mtk10\">func</span><span class=\"mtk1\">(...</span><span class=\"mtk12\">funcArgs</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk14\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserUnauthenticatedError</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// translate UserUnauthenticatedError into Apollo AuthenticationError</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">AuthenticationError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk14\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserUnauthorizedError</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// translate UserUnauthorizedError into Apollo ForbiddenError</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ForbiddenError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk14\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// re-throw all other errors</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk14\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  };</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Now after passing our resolvers through this function we would get all proprietary errors automatically translated. We can apply this function in resolvers’ map to those resolvers that might potentially throw <em>UserUnauthenticatedError</em> or <em>UserUnauthorizedError</em>. In the following example we omit <em>addUser</em> and <em>sighIn</em> operations as they are public, accessible for everyone, so they should not throw any of the errors we want to catch:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">translateErrors</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./errors&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">addUserResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./addUser&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">deleteUserResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./deleteUser&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">getUserResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./getUser&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">signInResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./signIn&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">signOutResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./signOut&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">updateUserNameResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./updateUserName&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">updateUserEmailResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./updateUserEmail&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">updateUserPasswordResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./updateUserPassword&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">updateUserPhoneResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./updateUserPhone&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">resolvers</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">Query:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">getUser:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">getUserResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">Mutation:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">addUser:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">addUserResolver</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">deleteUser:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">deleteUserResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">signIn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">signInResolver</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">signOut:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">signOutResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserName:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updateUserNameResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserEmail:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updateUserEmailResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserPassword:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updateUserPasswordResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserPhone:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updateUserPhoneResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>That would work in Javascript, but how could we achieve the same in Typescript, so that in the end we have a fully type-safe system? To annotate <em>translateErrors</em> function with appropriate types we have to use <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\">generics</a> as we want to be able to pass asynchronous function of any type to it. Let’s start with <a href=\"https://www.typescriptlang.org/docs/handbook/generics.html#generic-constraints\">generic constraint</a>. The only constraint we want to impose is that a function being parameter should return a promise, so that we can invoke it in asynchronous way. Apart from that we want the constraint to be as permissive as possible, the function can have any number of parameters of any type, as well as the promise that it returns can resolve to any type. We could use <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#any\">any</a> type for that, but that wouldn’t be type-safe (and also our linter would complain :) ). So how can we do that in a type-safe way? First let’s start with types of parameters. They are in contravariant position, so the most permissive type here is <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html#never\">never</a>, as it is a subtype of, and assignable to, every type. We want to allow for any number of parameters so our parameters side of constraint would be:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">(...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[])</span></span></code></pre>\n<p>What about return part of the constraint? We could use <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypet\">ReturnType&#x3C;T></a> which is a build-in utility type provided by Typescript, but we cannot do that as the function must return a promise. So let’s build our own <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#conditional-types\">conditional type</a> inferring return type unpacked from a promise. Let’s call it <em>UnpromisifiedReturnType&#x3C;T></em>. In contravariant positions we are going to use any number of arguments of type <em>never</em> and in covariant position we are going to use type <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html#new-unknown-top-type\">unknown</a>, since anything is assignable to <em>unknown</em>, but <em>unknown</em> is not assignable to anything:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UnpromisifiedReturnType</span><span class=\"mtk1\">&lt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk9\">T</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">unknown</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">&gt; = </span><span class=\"mtk9\">T</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">infer</span><span class=\"mtk1\"> </span><span class=\"mtk9\">R</span><span class=\"mtk1\">&gt; ? </span><span class=\"mtk9\">R</span><span class=\"mtk1\"> : </span><span class=\"mtk9\">never</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>As we can see when compiler is unable to infer type then it will return <em>never</em>. As a result no type will be able to be assigned to it and the compiler will warn us about improper assignment. Now we can build our generic constraint:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">&lt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk9\">T</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UnpromisifiedReturnType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\">&gt;&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">&gt;</span></span></code></pre>\n<p>Next let’s annotate parameter and return value of <em>translateErrors</em> function. Function passed as a parameter is of type <em>T</em>, but what about return type? <em>translateErrors</em> should return a function of the same signature as the function that is passed to it. Here we can use another built-in utility type provided by Typescript: <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#parameterst\">Parameters&#x3C;T></a>. With use of it return type of <em>translateErrors</em> function would be:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk9\">AsyncFunction</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">unknown</span><span class=\"mtk1\">&gt;&gt; = (</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  ...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Parameters</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UnpromisifiedReturnType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\">&gt;&gt;;</span></span></code></pre>\n<p>Ok, so now let’s put all the blocks together:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UnpromisifiedReturnType</span><span class=\"mtk1\">&lt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk9\">T</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">unknown</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">&gt; = </span><span class=\"mtk9\">T</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk4\">infer</span><span class=\"mtk1\"> </span><span class=\"mtk9\">R</span><span class=\"mtk1\">&gt; ? </span><span class=\"mtk9\">R</span><span class=\"mtk1\"> : </span><span class=\"mtk9\">never</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk9\">AsyncFunction</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">unknown</span><span class=\"mtk1\">&gt;&gt; = (</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  ...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Parameters</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UnpromisifiedReturnType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\">&gt;&gt;;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">&lt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk9\">T</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> (...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UnpromisifiedReturnType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\">&gt;&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">&gt;(</span><span class=\"mtk12\">func</span><span class=\"mtk1\">: </span><span class=\"mtk9\">T</span><span class=\"mtk1\">): </span><span class=\"mtk9\">AsyncFunction</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\">&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> (</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    ...</span><span class=\"mtk12\">funcArgs</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Parameters</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\">&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  ): </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UnpromisifiedReturnType</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">T</span><span class=\"mtk1\">&gt;&gt; </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk14\">await</span><span class=\"mtk1\"> </span><span class=\"mtk10\">func</span><span class=\"mtk1\">(...</span><span class=\"mtk12\">funcArgs</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk14\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserUnauthenticatedError</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// translate UserUnauthenticatedError into Apollo&#39;s AuthenticationError</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">AuthenticationError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk14\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserUnauthorizedError</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// translate UserUnauthorizedError into Apollo&#39;s ForbiddenError</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ForbiddenError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">message</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk14\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// re-throw all other errors</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk14\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  };</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>As a result we have a function that takes an asynchronous function and returns another asynchronous function of exactly the same signature as the one that was passed in. The returned function invokes passed in function in asynchronous way, catches proprietary errors and throws Apollo’s errors instead.</p>\n<p>Now we have to apply the function to our resolvers. We might have temptation to apply it to all resolvers in a loop, for example by using <em>Object.entries</em> or <em>for/in</em> with <em>hasOwnProperty</em>. But there is an important caveat: by doing so we loose type safety as Typescript while looping through an object casts types of all values to <em>any</em>. What at most we could do is to invoke <em>Object.entries</em> with type variable set to most permissive asynchronous function, E.g. like this:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk9\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk10\">values</span><span class=\"mtk1\">(</span><span class=\"mtk12\">resolvers</span><span class=\"mtk1\">).</span><span class=\"mtk10\">forEach</span><span class=\"mtk1\">(</span><span class=\"mtk12\">resolverGroup</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk9\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk10\">entries</span><span class=\"mtk1\">&lt;(...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">never</span><span class=\"mtk1\">[]) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">unknown</span><span class=\"mtk1\">&gt;&gt;(</span><span class=\"mtk12\">resolverGroup</span><span class=\"mtk1\">).</span><span class=\"mtk10\">forEach</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">entry</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">resolverGroup</span><span class=\"mtk1\">[</span><span class=\"mtk12\">entry</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">]] = </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">entry</span><span class=\"mtk1\">[</span><span class=\"mtk7\">1</span><span class=\"mtk1\">]);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">});</span></span></code></pre>\n<p>Then the compiler would at least catch if we try to pass synchronous function instead of asynchronous one, but still would not be able to warn about arguments or return type not conforming to our GraphQL schema. So let’s apply the function selectively, but before we do that let’s add one more tool to our system: <a href=\"https://github.com/dotansimha/graphql-code-generator\">graphql code generator</a>. It’s a tool that can generate Typescript types based on GraphQL schema. Out of generated types we are going to use <em>MutationResolvers</em>, <em>QueryResolvers</em> and <em>ResolversObject</em> in our resolvers’ map. Now let’s see how the map looks like in Typescript:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">MutationResolvers</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">QueryResolvers</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ResolversObject</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">} </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;../graphql/generated&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">translateErrors</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./errors&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">addUserResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./addUser&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">deleteUserResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./deleteUser&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">getUserResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./getUser&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">signInResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./signIn&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">signOutResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./signOut&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">updateUserNameResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./updateUserName&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">updateUserEmailResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./updateUserEmail&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">updateUserPasswordResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./updateUserPassword&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">updateUserPhoneResolver</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./updateUserPhone&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk9\">Resolvers</span><span class=\"mtk1\"> = </span><span class=\"mtk9\">ResolversObject</span><span class=\"mtk1\">&lt;{</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">Query</span><span class=\"mtk1\">: </span><span class=\"mtk9\">QueryResolvers</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">Mutation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">MutationResolvers</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}&gt;;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">resolvers</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Resolvers</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">Query:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">getUser:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">getUserResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">Mutation:</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">addUser:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">addUserResolver</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">deleteUser:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">deleteUserResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">signIn:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">signInResolver</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">signOut:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">signOutResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserName:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updateUserNameResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserEmail:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updateUserEmailResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserPassword:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updateUserPasswordResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserPhone:</span><span class=\"mtk1\"> </span><span class=\"mtk10\">translateErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">updateUserPhoneResolver</span><span class=\"mtk1\">),</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>In this case <em>translateErrors</em> function translates only two errors but we can expand it to cover more types of errors based on our system’s needs. And also in case the underlying system is not so uniform we can provide more than one <em>translateErrors</em> functions, each suited to unique needs of part of the system. To any resolver several such functions can be applied. Also some of them can return non-asynchronous functions in case part of the system works in synchronous way.</p>\n<p>Let’s wrap up, with this setup we don’t have to make any modifications to our underlying system, nor do we have to duplicate try/catch blocks for system-wide errors in every resolver. And by using types generated by <em>graphql-codegen</em> we gain full type safety of the system: when we forget to cover some of queries or mutations with resolvers or use resolver with incorrect set of arguments or return type then it is going to be caught in compilation phase.</p>\n<p>Now let’s see how we can handle service-specific errors.</p>\n<h2>2. Handling service-specific errors</h2>\n<p>Service-specific errors might include for example:</p>\n<ul>\n<li><em>EmailExistsError</em> thrown by <em>addUser</em> service when provided email is already registered in the system,</li>\n<li><em>InvalidCredentialsError</em> thrown by <em>signIn</em> service when an user tries to sign in with invalid email or password,</li>\n<li>etc.</li>\n</ul>\n<p>Errors like these result from users’ actions that don’t pass server-side validation. Apollo Server provides special error type for handling these situations: <em>UserInputError</em>. On instantiation its constructor function takes two arguments: required <em>message</em> and optional <em>properties</em>:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserInputError</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">: </span><span class=\"mtk9\">string</span><span class=\"mtk1\">, </span><span class=\"mtk12\">properties</span><span class=\"mtk1\">?: </span><span class=\"mtk9\">Record</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">string</span><span class=\"mtk1\">, </span><span class=\"mtk9\">any</span><span class=\"mtk1\">&gt;) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">super</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">, </span><span class=\"mtk17\">&#39;BAD_USER_INPUT&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">properties</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">Object</span><span class=\"mtk1\">.</span><span class=\"mtk10\">defineProperty</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">, </span><span class=\"mtk17\">&#39;name&#39;</span><span class=\"mtk1\">, { </span><span class=\"mtk12\">value:</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&#39;UserInputError&#39;</span><span class=\"mtk1\"> });</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>To translate service-specific error into <em>UserInputError</em> we can simply catch it in the resolver that invokes the service and use <em>properties</em> argument to <a href=\"https://www.apollographql.com/docs/apollo-server/data/errors/#augmenting-error-details\">augment error details</a>. The issue with this approach is that errors are not part of GraphQL schema so any changes to error details have to be synchronized with all places where the error is consumed on client side, otherwise runtime errors are going to be occurring in client applications. Let’s use Typescript compiler to check it for us and provide type safety also in this area.</p>\n<p>First let’s make <em>properties</em> argument mandatory by extending <em>UserInputError</em>:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk9\">InvalidUserInputError</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserInputError</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">: </span><span class=\"mtk9\">string</span><span class=\"mtk1\">, </span><span class=\"mtk12\">properties</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputErrorProperties</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">super</span><span class=\"mtk1\">(</span><span class=\"mtk12\">message</span><span class=\"mtk1\">, </span><span class=\"mtk12\">properties</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Now we have to decide what shape the <em>properties</em> object is going to have. For example we can decide that every <em>properties</em> object will have:</p>\n<ul>\n<li><em>operation</em> property conveying information in which operation the error occurred</li>\n<li><em>codes</em> property conveying information what type/types of errors occurred</li>\n<li>other optional properties, for example communicating actual error message to be displayed in case of server-side i18n</li>\n</ul>\n<p>So every <em>properties</em> object would have to have the following shape:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ErrorProperties</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">codes</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Array</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Let’s use <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html#string-enums\">string enums</a> to assign string literals for three exemplary operations:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">enum</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">AddUser</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;ADD_USER&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">SighIn</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;SIGN_IN&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">UpdateUserEmail</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;UPDATE_USER_EMAIL&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>and three exemplary error codes:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">enum</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">EmailExists</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;EMAIL_EXISTS&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">InvalidCredentials</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;INVALID_CREDENTIALS&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">InvalidPassword</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;INVALID_PASSWORD&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Next we export <em>UserInputOperation</em> and <em>UserInputErrorCode</em> as we’ll be using them in our resolvers. Now we have to decide which operations can send which error codes, for example:</p>\n<p>Operation <em>ADD_USER</em> can send error code <em>EMAIL_EXISTS</em>:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk9\">AddUserErrorProperties</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ErrorProperties</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\">.</span><span class=\"mtk9\">AddUser</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">codes</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Array</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk9\">EmailExists</span><span class=\"mtk1\">&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Operation <em>SIGN_IN</em> can send error code <em>INVALID_CREDENTIALS</em>:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk9\">SignInErrorProperties</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ErrorProperties</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\">.</span><span class=\"mtk9\">SighIn</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">codes</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Array</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk9\">InvalidCredentials</span><span class=\"mtk1\">&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>And operation <em>UPDATE_USER_EMAIL</em> can send error codes <em>EMAIL_EXISTS</em> and <em>INVALID_PASSWORD</em>:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UpdateUserEmailErrorProperties</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ErrorProperties</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\">.</span><span class=\"mtk9\">UpdateUserEmail</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">codes</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Array</span><span class=\"mtk1\">&lt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk9\">EmailExists</span><span class=\"mtk1\"> | </span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk9\">InvalidPassword</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  &gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>If any operation needs additional properties for handling an error on client side then we can add them next to <em>operation</em> and <em>codes</em> properties. In resolvers we can import these interfaces either individually or we can group them into an union and use Typescript’s\n<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\">discriminated union</a> concept. If we do that then <em>operation</em> property will become the discriminant and after selecting appropriate operation the union type will get narrowed down to type specific to this operation. Let’s do that and export only the union type:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserInputErrorProperties</span><span class=\"mtk1\"> =</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  | </span><span class=\"mtk9\">AddUserErrorProperties</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  | </span><span class=\"mtk9\">SignInErrorProperties</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  | </span><span class=\"mtk9\">UpdateUserEmailErrorProperties</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>Now let’s use the union in an exemplary resolver, along with types generated by <a href=\"https://github.com/dotansimha/graphql-code-generator\">graphql code generator</a>:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">async</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">updateUserEmailResolver</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">parent</span><span class=\"mtk1\">: {},</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">args</span><span class=\"mtk1\">: </span><span class=\"mtk9\">MutationUpdateUserEmailArgs</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ctx</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ResolverContext</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">): </span><span class=\"mtk9\">Promise</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UpdateUserMutationResponse</span><span class=\"mtk1\">&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">try</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">updatedUser</span><span class=\"mtk1\"> = </span><span class=\"mtk14\">await</span><span class=\"mtk1\"> </span><span class=\"mtk10\">updateEmail</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ctx</span><span class=\"mtk1\">, {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">email:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">args</span><span class=\"mtk1\">.</span><span class=\"mtk12\">email</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">userId:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">args</span><span class=\"mtk1\">.</span><span class=\"mtk12\">userId</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">currentPassword:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">args</span><span class=\"mtk1\">.</span><span class=\"mtk12\">currentPassword</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mutationResponse</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UpdateUserMutationResponse</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">isSuccess:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">message:</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;User email updated successfully&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">user:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">updatedUser</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    };</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">mutationResponse</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  } </span><span class=\"mtk14\">catch</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">InvalidPasswordError</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">properties</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputErrorProperties</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">operation:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">UserInputOperation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">UpdateUserEmail</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">codes:</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk12\">InvalidPassword</span><span class=\"mtk1\">],</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      };</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">InvalidUserInputError</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk17\">&quot;Invalid password, failed to update user email&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">properties</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      );</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk14\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">EmailExistsError</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">properties</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputErrorProperties</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">operation:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">UserInputOperation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">UpdateUserEmail</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">codes:</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk12\">EmailExists</span><span class=\"mtk1\">],</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      };</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">InvalidUserInputError</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk17\">&quot;Failed to update user, email exists&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">properties</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      );</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk14\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">apolloError</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk14\">throw</span><span class=\"mtk1\"> </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>If <em>updateEmail</em> service completes successfully then we build <em>mutationResponse</em> object and return it. But when it throws <em>InvalidPasswordError</em> or <em>EmailExistsError</em> then we translate them into Apollo’s <em>UserInputError</em> with appropriate <em>properties</em> object. All other errors are rethrown. In this setup when we select an operation correctly then Typescript’s compiler will not allow us to use error code other than those defined for this operation, and if we add other properties to the interface related to the operation then Typescript compiler will also display an error if we forget to add them.</p>\n<p>Even bigger benefit we would gain when we exclude <em>UserInputErrorProperties</em> and related enums to a separate project, common for both client/clients and server side. Then after using it also on client side we could gain full type safety across the system: in case of any changes in error handling for an operation the Typescript compiler would show us where the operation is used and the system would not compile until changes are synchronized across the system. We’ll see how we could do that in <a href=\"/blog/error-handling-with-apollo-client/\">next post</a>.</p>\n<p>For now we have one more category of errors to handle - all other, unexpected errors.</p>\n<h2>3. Handling unexpected errors</h2>\n<p>Examples of unexpected errors might include:</p>\n<ul>\n<li>i/o errors related to database/filesystem/external api access issues</li>\n<li>errors resulted from bugs in source code or dependencies of the project</li>\n<li>etc.</li>\n</ul>\n<p>When no layer of our system knows how to handle an error then it is rethrown up layer by layer.\nAnd as a sidenote, it would be a <a href=\"https://www.sitepoint.com/proper-error-handling-javascript/\">bad practice</a> to silently suppress unexpected errors in a layer that cannot properly handle them. Before the unexpected error reaches egress we can use one more capability of Apollo Server: <a href=\"https://www.apollographql.com/docs/apollo-server/data/errors/#masking-and-logging-errors\">masking and logging errors</a>. On instantiation Apollo Server takes <em>config</em> object as a constructor parameter and one of properties of this object is <em>formatError</em> property to which we can assign a function. If the function is provided then every error before being transmitted outside is passed through it. Let’s see how the function could look like:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">GraphQLError</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;graphql&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ApolloError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">AuthenticationError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">ForbiddenError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">UserInputError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">} </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;apollo-server-express&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">logger</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;./logger&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;errors/&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">formatError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">GraphQLError</span><span class=\"mtk1\">): </span><span class=\"mtk9\">GraphQLError</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">functionPath</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">path</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">formatError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">name</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">originalError</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">AuthenticationError</span><span class=\"mtk1\"> ||</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ForbiddenError</span><span class=\"mtk1\"> ||</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">originalError</span><span class=\"mtk1\"> </span><span class=\"mtk4\">instanceof</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserInputError</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    ) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">logger</span><span class=\"mtk1\">.</span><span class=\"mtk10\">verbose</span><span class=\"mtk1\">(</span><span class=\"mtk12\">functionPath</span><span class=\"mtk1\">, </span><span class=\"mtk9\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk10\">stringify</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">));</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">logger</span><span class=\"mtk1\">.</span><span class=\"mtk10\">error</span><span class=\"mtk1\">(</span><span class=\"mtk12\">functionPath</span><span class=\"mtk1\">, </span><span class=\"mtk9\">JSON</span><span class=\"mtk1\">.</span><span class=\"mtk10\">stringify</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">));</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// Do not send stacktrace to clients:</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">extensions</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">exception</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">stacktrace</span><span class=\"mtk1\"> !== </span><span class=\"mtk4\">undefined</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">extensions</span><span class=\"mtk1\">.</span><span class=\"mtk12\">exception</span><span class=\"mtk1\">.</span><span class=\"mtk12\">stacktrace</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">undefined</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">error</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>In this function we filter out all errors that are related to user’s invalid actions and log all other errors as actual errors that need attention. We can also clear stacktrace so that it is not transmitted to clients, as we don’t want to expose internal structure of our system outside. There are also <a href=\"https://www.apollographql.com/docs/apollo-server/data/errors/#default-information\">other ways</a> to disable stacktrace in production. After an unexpected error is processed it is transmitted outside with <em>extensions.code</em> set to <em>INTERNAL_SERVER_ERROR</em>. Such an error should be subsequently properly handled in client application’s UI, we’ll see how to do that in <a href=\"/blog/error-handling-with-apollo-client/\">next post</a>.</p>\n<p>Wrapping up, handling unexpected errors on server side boils down to properly logging/reporting them - as solving issues that caused them usually requires human intervention.</p>\n<h2>Summary</h2>\n<p>Let’s summarize, as a result of implemented changes we have a system that properly handles errors generated in the system and translates them into Apollo’s errors in a fully type-safe way. But most importantly, all changes have been implemented in the resolvers layer and apart from added GraphQL capabilities the system works as before.</p>\n<p>In <a href=\"/blog/error-handling-with-apollo-client/\">next post</a> let’s see how we can handle errors send by Apollo Server on client side.</p>\n<style class=\"grvsc-styles\">\n  :root {\n    --grvsc-padding-v: 1rem;\n    --grvsc-padding-h: 1.5rem;\n    --grvsc-padding-top: var(--grvsc-padding-v);\n    --grvsc-padding-right: var(--grvsc-padding-h);\n    --grvsc-padding-bottom: var(--grvsc-padding-v);\n    --grvsc-padding-left: var(--grvsc-padding-h);\n    --grvsc-border-radius: 8px;\n  \n    --grvsc-line-highlighted-background-color: transparent;\n    --grvsc-line-highlighted-border-width: 4px;\n    --grvsc-line-highlighted-border-color: transparent;\n  }\n  \n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top);\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom);\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left);\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right);\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width) 0 0 0 var(--grvsc-line-highlighted-border-color);\n  }\n  \n  .light-default-light {\n    background-color: #FFFFFF;\n    color: #000000;\n  }\n  .light-default-light .mtk14 { color: #AF00DB; }\n  .light-default-light .mtk1 { color: #000000; }\n  .light-default-light .mtk4 { color: #0000FF; }\n  .light-default-light .mtk10 { color: #795E26; }\n  .light-default-light .mtk12 { color: #001080; }\n  .light-default-light .mtk9 { color: #267F99; }\n  .light-default-light .mtk3 { color: #008000; }\n  .light-default-light .mtk17 { color: #A31515; }\n  .light-default-light .mtk7 { color: #09885A; }\n</style>","frontmatter":{"title":"Error handling with Apollo Server","date":"February 01, 2020"}}},"pageContext":{"next":{"fields":{"slug":"/error-handling-with-apollo-client/"},"frontmatter":{"title":"Error handling with Apollo Client"}},"previous":null,"slug":"/error-handling-with-apollo-server/"}}}