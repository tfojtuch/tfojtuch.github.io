{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/error-handling-with-apollo-client/","result":{"data":{"site":{"id":"Site","siteMetadata":{"title":"Tomek's blog","author":"Tomek Fojtuch"}},"markdownRemark":{"id":"3cff364b-4466-518c-9b07-fc7b3b0de1c3","excerpt":"In continuation of previous post dedicated to server-side error handling, in this post let’s focus on error handling in a react application with Apollo Client…","html":"<p>In continuation of <a href=\"/blog/error-handling-with-apollo-server/\">previous post</a> dedicated to server-side error handling, in this post let’s focus on error handling in a react application with Apollo Client. In such an application we can experience errors related to GraphQL response as well as other, non-GraphQL-related errors in UI or internal logic - those will be covered in the last section. </p>\n<p>GraphQL-related errors can be accessed in an application through <a href=\"https://github.com/apollographql/apollo-client/blob/master/src/errors/ApolloError.ts\">ApolloError</a> object containing fields:</p>\n<ul>\n<li><em>networkError</em> - when no response was obtained</li>\n<li><em>graphQLErrors</em> array - contains errors returned by server</li>\n<li><em>message</em> - error message, by default concatenated from error messages of <em>networkError</em> and <em>graphQLErrors</em></li>\n<li><em>extraInfo</em> - used internally by Apollo Client</li>\n</ul>\n<p>Apollo Client’s capabilities that we can use for error handling are described in Apollo’s <a href=\"https://www.apollographql.com/docs/react/data/error-handling/\">documentation</a> and\n<a href=\"https://blog.apollographql.com/full-stack-error-handling-with-graphql-apollo-5c12da407210\">blog</a>. Let’s shortly summarize what capabilities we have at hand. As every GraphQL response can contain both <em>data</em> and <em>errors</em>, for every query or mutation individual <a href=\"https://www.apollographql.com/docs/react/data/error-handling/#error-policies\">errorPolicy</a> can be set. This setting allows to ignore <em>data</em>, ignore <em>errors</em> or retain both on a response. When errors are not ignored they can be handled either globally by providing a global handler or locally on component level using one of two options:</p>\n<ul>\n<li><em>error</em> object returned from <em>useQuery</em>/<em>useMutation</em></li>\n<li>an error handler provided to <em>onError</em> property of <em>useQuery’s</em>/<em>useMutation’s</em> configuration object</li>\n</ul>\n<p>Which option to choose depends on what result we want to achieve:</p>\n<ul>\n<li>When we want to change internal state of a component then we have to use <em>onError</em> callback. Otherwise, when we try to change state outside of a handler we’ll get the following error from React: “Error: Too many re-renders. React limits the number of renders to prevent an infinite loop.”.</li>\n<li>When we want to display a custom component we should use <em>error</em> object, since there is no way to return a component from <em>onError</em> handler.</li>\n</ul>\n<p>In short, for imperative code we should use <em>onError</em> handler and for declarative code we should use <em>error</em> object. In the next section let’s cover how GraphQL errors can be handled using <em>onError</em> handlers.</p>\n<h2>1. Handling GraphQL errors imperatively</h2>\n<p>Errors can be handled either globally or locally on component level. First let’s cover global handling. A global handler can be set either with use of <a href=\"https://www.apollographql.com/docs/link/links/error/\">apollo-link-error</a> or with Apollo Boost by directly using <em>onError</em> property:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">client</span><span class=\"mtk1\"> = </span><span class=\"mtk4\">new</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ApolloClient</span><span class=\"mtk1\">({</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">onError</span><span class=\"mtk12\">:</span><span class=\"mtk1\"> ({ </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">, </span><span class=\"mtk12\">response</span><span class=\"mtk1\">, </span><span class=\"mtk12\">graphQLErrors</span><span class=\"mtk1\">, </span><span class=\"mtk12\">networkError</span><span class=\"mtk1\"> }) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// here errors can be handled globally</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">});</span></span></code></pre>\n<p>How the global handler is used depends on project’s requirements and may include changing global state, remote logging, refreshing authentication tokens after receiving error with <em>UNAUTHENTICATED</em> code etc.</p>\n<p>An error can be also handled on component level via <em>onError</em> property of <em>useQuery’s</em>/<em>useMutation’s</em> configuration object. Continuing example from <a href=\"/blog/error-handling-with-apollo-server/\">previous post</a> let’s see how error handling could look like in <em>UpdateUserEmail</em> component. First let’s a build custom hook <em>useUpdateUserEmailMutation</em>. For type safety - like on server side - we also use types generated by <a href=\"https://github.com/dotansimha/graphql-code-generator\">graphql code generator</a> :</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">useMutation</span><span class=\"mtk1\">, </span><span class=\"mtk12\">MutationHookOptions</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;@apollo/react-hooks&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">UpdateUserEmailMutation</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">UpdateUserEmailMutationVariables</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">} </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;graphql/generated&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">import</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">UPDATE_USER_EMAIL</span><span class=\"mtk1\"> } </span><span class=\"mtk14\">from</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;graphql/operations/user&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">useUpdateUserEmailMutation</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">options</span><span class=\"mtk1\">?: </span><span class=\"mtk9\">MutationHookOptions</span><span class=\"mtk1\">&lt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">UpdateUserEmailMutation</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">UpdateUserEmailMutationVariables</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  &gt;,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk10\">useMutation</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UpdateUserEmailMutation</span><span class=\"mtk1\">, </span><span class=\"mtk9\">UpdateUserEmailMutationVariables</span><span class=\"mtk1\">&gt;(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">UPDATE_USER_EMAIL</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">options</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Next we import the hook into <em>UpdateUserEmail</em> component and use it:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserEmail</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    { </span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">loading</span><span class=\"mtk1\">, </span><span class=\"mtk12\">error</span><span class=\"mtk1\"> },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  ] = </span><span class=\"mtk10\">useUpdateUserEmailMutation</span><span class=\"mtk1\">({</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">onError:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handleErrors</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  });</span></span></code></pre>\n<p>Now we have to create <em>handleErrors</em> function, but first let’s recall what kind of errors we have to cover. <em>updateUserEmailResolver</em> could send us <em>UserInputError</em> with <em>properties</em> object containing <em>operation</em> property set to <em>UPDATE_USER_EMAIL</em> and <em>codes</em> property set to <em>EMAIL_EXISTS</em> or <em>INVALID_PASSWORD</em>. Our <em>handleErrors</em> function will have to cover these two cases, so let’s first write error handlers covering each of them. To not have to remember string literals representing error codes lets use <em>UserInputErrorCode</em> that we were using on server side and excluded to a separate, common package:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">enum</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">EmailExists</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;EMAIL_EXISTS&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">InvalidCredentials</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;INVALID_CREDENTIALS&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">InvalidPassword</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;INVALID_PASSWORD&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Using it we can build error handlers, here is an example with <a href=\"https://github.com/react-hook-form/react-hook-form\">react-hook-form</a> used for form handling and <a href=\"https://github.com/formatjs/react-intl\">react-intl</a> used for i18n:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handleEmailExistsError</span><span class=\"mtk1\">(): </span><span class=\"mtk9\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">emailErrorMessage</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">intl</span><span class=\"mtk1\">.</span><span class=\"mtk10\">formatMessage</span><span class=\"mtk1\">({</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">id:</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;EmailTextFieldErrorId&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">setError</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&quot;emailTextFieldName&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk12\">EmailExists</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">emailErrorMessage</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handleInvalidPasswordError</span><span class=\"mtk1\">(): </span><span class=\"mtk9\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">passwordErrorMessage</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">intl</span><span class=\"mtk1\">.</span><span class=\"mtk10\">formatMessage</span><span class=\"mtk1\">({</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">id:</span><span class=\"mtk1\"> </span><span class=\"mtk17\">&quot;CurrentPasswordTextFieldErrorId&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk10\">setError</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk17\">&quot;currentPasswordTextFieldName&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk12\">InvalidPassword</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">passwordErrorMessage</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span></code></pre>\n<p>Next we can use these handlers to build <em>handleErrors</em> function:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handleErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\">): </span><span class=\"mtk9\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">canHandleErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">, </span><span class=\"mtk12\">errorProperties</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handlers</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">[UserInputErrorCode.EmailExists]:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handleEmailExistsError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk12\">[UserInputErrorCode.InvalidPassword]:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handleInvalidPasswordError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      };</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk10\">handleUserInputErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">, </span><span class=\"mtk12\">handlers</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span></code></pre>\n<p>Let’s analyze what the function does. It receives an error of type <em>ApolloError</em>, the error can contain <em>networkError</em> and/or <em>graphQLErrors</em> array. First, using <em>canHandleErrors</em> function, we check if the handler can properly handle all received errors. If the function returns <em>true</em> then <em>handlers</em> object is being built and passed to <em>handleUserInputErrors</em> function. <em>canHandleErrors</em> function receives <em>error</em> and <em>errorProperties</em> object that conveys information what error properties this UI can handle. To build <em>errorProperties</em> object we have to recall from previous post what shape it has for <em>UPDATE_USER_EMAIL</em> operation:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">enum</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">AddUser</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;ADD_USER&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">SighIn</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;SIGN_IN&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">UpdateUserEmail</span><span class=\"mtk1\"> = </span><span class=\"mtk17\">&quot;UPDATE_USER_EMAIL&quot;</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ErrorProperties</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">codes</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Array</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk9\">AddUserErrorProperties</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ErrorProperties</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\">.</span><span class=\"mtk9\">AddUser</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">codes</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Array</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk9\">EmailExists</span><span class=\"mtk1\">&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk9\">SignInErrorProperties</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ErrorProperties</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\">.</span><span class=\"mtk9\">SighIn</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">codes</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Array</span><span class=\"mtk1\">&lt;</span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk9\">InvalidCredentials</span><span class=\"mtk1\">&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">interface</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UpdateUserEmailErrorProperties</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ErrorProperties</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputOperation</span><span class=\"mtk1\">.</span><span class=\"mtk9\">UpdateUserEmail</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">codes</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Array</span><span class=\"mtk1\">&lt;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk9\">EmailExists</span><span class=\"mtk1\"> | </span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk9\">InvalidPassword</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  &gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">type</span><span class=\"mtk1\"> </span><span class=\"mtk9\">UserInputErrorProperties</span><span class=\"mtk1\"> =</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  | </span><span class=\"mtk9\">AddUserErrorProperties</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  | </span><span class=\"mtk9\">SignInErrorProperties</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  | </span><span class=\"mtk9\">UpdateUserEmailErrorProperties</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>The above code was also excluded to the common project so we can use <em>UserInputErrorProperties</em> <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\">discriminated union</a> along with <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html#string-enums\">string enums</a> <em>UserInputOperation</em> and <em>UserInputErrorCode</em> to build <em>errorProperties</em> object:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk3\">// This UI can gracefully handle UserInputErrors with the following properties:</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">errorProperties</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputErrorProperties</span><span class=\"mtk1\"> = {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">operation:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">UserInputOperation</span><span class=\"mtk1\">.</span><span class=\"mtk12\">UpdateUserEmail</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">codes:</span><span class=\"mtk1\"> [</span><span class=\"mtk12\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk12\">InvalidPassword</span><span class=\"mtk1\">, </span><span class=\"mtk12\">UserInputErrorCode</span><span class=\"mtk1\">.</span><span class=\"mtk12\">EmailExists</span><span class=\"mtk1\">],</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>Now we can pass the object to <em>canHandleErrors</em> function. This function contains logic common for all components so it can be excluded to a separate module along with all helper functions it uses:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">isUserInputError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">: </span><span class=\"mtk9\">GraphQLError</span><span class=\"mtk1\">): </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">extensions</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">code</span><span class=\"mtk1\"> === </span><span class=\"mtk17\">&quot;BAD_USER_INPUT&quot;</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">isOperationExpected</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">: </span><span class=\"mtk9\">GraphQLError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">expectedOperation</span><span class=\"mtk1\">: </span><span class=\"mtk9\">string</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">): </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isExpected</span><span class=\"mtk1\"> =</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">extensions</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">exception</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">operation</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">expectedOperation</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isExpected</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">getErrorCodes</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">: </span><span class=\"mtk9\">GraphQLError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">): </span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">[] | </span><span class=\"mtk9\">null</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receivedErrorCodes</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">extensions</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">exception</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">codes</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk10\">isUserInputErrorCodeArray</span><span class=\"mtk1\">(</span><span class=\"mtk12\">receivedErrorCodes</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">null</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receivedErrorCodes</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">areErrorCodesExpected</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">: </span><span class=\"mtk9\">GraphQLError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">expectedErrorCodes</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputErrorCode</span><span class=\"mtk1\">[],</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">): </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">receivedErrorCodes</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">getErrorCodes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">receivedErrorCodes</span><span class=\"mtk1\"> === </span><span class=\"mtk4\">null</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">areAllCodesExpected</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">receivedErrorCodes</span><span class=\"mtk1\">.</span><span class=\"mtk10\">every</span><span class=\"mtk1\">(</span><span class=\"mtk12\">code</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isErrorCodeExpected</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">expectedErrorCodes</span><span class=\"mtk1\">.</span><span class=\"mtk10\">includes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">code</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isErrorCodeExpected</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  });</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">areAllCodesExpected</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">doesIncludeOnlyKnownErrors</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">knownErrorProperties</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputErrorProperties</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">): </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">areAllErrorsKnown</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">graphQLErrors</span><span class=\"mtk1\">.</span><span class=\"mtk10\">every</span><span class=\"mtk1\">(</span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isErrorTypeValid</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">isUserInputError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isOperationValid</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">isOperationExpected</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">knownErrorProperties</span><span class=\"mtk1\">.</span><span class=\"mtk12\">operation</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">areAllErrorCodesValid</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">areErrorCodesExpected</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">knownErrorProperties</span><span class=\"mtk1\">.</span><span class=\"mtk12\">codes</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isErrorKnown</span><span class=\"mtk1\"> =</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk12\">isErrorTypeValid</span><span class=\"mtk1\"> && </span><span class=\"mtk12\">isOperationValid</span><span class=\"mtk1\"> && </span><span class=\"mtk12\">areAllErrorCodesValid</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">isErrorKnown</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  });</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">areAllErrorsKnown</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">canHandleErrors</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">knownErrorProperties</span><span class=\"mtk1\">: </span><span class=\"mtk9\">UserInputErrorProperties</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">): </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">graphQLErrors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> === </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// check if all errors can be handled:</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">canHandleAllErrors</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">doesIncludeOnlyKnownErrors</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">error</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">knownErrorProperties</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">canHandleAllErrors</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>Not going into details, <em>canHandleErrors</em> and its helper functions check that all received errors are of type <em>UserInputError</em> (have <em>extension.code</em>: <em>BAD_USER_INPUT</em>), have <em>operation</em> correctly set (in our example it should be <em>UPDATE_USER_EMAIL</em>) and that all error codes can be handled by this component (in our example valid error codes are <em>EMAIL_EXISTS</em> and <em>INVALID_PASSWORD</em>). If <em>canHandleErrors</em> returns <em>true</em> then errors are handled in <em>handleUserInputErrors</em> function:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">handleUserInputErrors</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">handlers</span><span class=\"mtk1\">: {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    [</span><span class=\"mtk12\">key</span><span class=\"mtk1\">: </span><span class=\"mtk9\">string</span><span class=\"mtk1\">]: () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk9\">void</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">): </span><span class=\"mtk9\">void</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">graphQLErrors</span><span class=\"mtk1\">.</span><span class=\"mtk10\">forEach</span><span class=\"mtk1\">(</span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">errorCodes</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">getErrorCodes</span><span class=\"mtk1\">(</span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">errorCodes</span><span class=\"mtk1\">?.</span><span class=\"mtk10\">forEach</span><span class=\"mtk1\">(</span><span class=\"mtk12\">code</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handler</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">handlers</span><span class=\"mtk1\">[</span><span class=\"mtk12\">code</span><span class=\"mtk1\">];</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">handler</span><span class=\"mtk1\"> !== </span><span class=\"mtk4\">undefined</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">        </span><span class=\"mtk10\">handler</span><span class=\"mtk1\">();</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    });</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  });</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>This function takes <em>handlers</em> object and invokes the appropriate handler for each received error code. For example for <em>EMAIL_EXISTS</em> <em>handleEmailExistsError</em> is invoked and assigns <em>EMAIL_EXISTS</em> to <em>emailTextFieldName</em> input. Internal state is changed and React updates UI with error message of <em>EmailTextFieldErrorId</em> id.</p>\n<p>What does this setup give us? Each component has to include only those constructs that are specific to that component:</p>\n<ul>\n<li><em>errorProperties</em> object conveying information what errors the component can handle</li>\n<li>error handlers for each error code, in our example <em>handleEmailExistsError</em> and <em>handleInvalidPasswordError</em></li>\n<li>and <em>handleErrors</em> function provided to <em>useQuery</em>/<em>useMutation</em> hook</li>\n</ul>\n<p>All other error handling logic is excluded to an utility module and can be reused in all components.</p>\n<p>And by using <em>UserInputErrorProperties</em> on both client and server side we gain type safety across the system - if any change in error’s <em>properties</em> object is made on either side and the change is not synchronized everywhere where the error is handled then during compilation Typescript will show places where source code needs update.</p>\n<p>What if a component cannot handle errors imperatively and <em>canHandleErrors</em> function returns <em>false</em>? These errors have to be handled declaratively, let’s see how we can do that in the next section.</p>\n<h2>2. Handling GraphQL errors declaratively</h2>\n<p>For displaying a custom UI component when an error occurs we can use <em>error</em> object returned by <em>useQuery</em>/<em>useMutation</em> hook. In our example:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> [</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">updateUserEmail</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    { </span><span class=\"mtk12\">data</span><span class=\"mtk1\">, </span><span class=\"mtk12\">loading</span><span class=\"mtk1\">, </span><span class=\"mtk12\">error</span><span class=\"mtk1\"> },</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  ] = </span><span class=\"mtk10\">useUpdateUserEmailMutation</span><span class=\"mtk1\">({</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">onError:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">handleErrors</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  });</span></span></code></pre>\n<p>Before displaying a fallback UI we have to check if the error has not been handled by <em>onError</em> handler. We can use previously defined <em>canHandleErrors</em> function for that:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">error</span><span class=\"mtk1\"> && !</span><span class=\"mtk10\">canHandleErrors</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">, </span><span class=\"mtk12\">errorProperties</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk9\">DefaultError</span><span class=\"mtk1\"> </span><span class=\"mtk9\">error</span><span class=\"mtk1\">={</span><span class=\"mtk9\">error</span><span class=\"mtk1\">} /&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span></code></pre>\n<p>The error can contain various error codes, if we want to differentiate fallback UI based on an error code then it can be done internally in <em>DefaultError</em> component. For example if we want to:</p>\n<ul>\n<li>redirect to <em>SIGN_IN</em> route in case of error code <em>UNAUTHENTICATED</em></li>\n<li>display a custom error message for other error codes</li>\n</ul>\n<p>then <em>DefaultError</em> component could look like this:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">doesIncludeErrorType</span><span class=\"mtk1\">(</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk12\">apolloErrorType</span><span class=\"mtk1\">: </span><span class=\"mtk9\">string</span><span class=\"mtk1\">,</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">): </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">graphQLErrors</span><span class=\"mtk1\">.</span><span class=\"mtk10\">some</span><span class=\"mtk1\">(</span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">graphQLError</span><span class=\"mtk1\">.</span><span class=\"mtk12\">extensions</span><span class=\"mtk1\">?.</span><span class=\"mtk12\">code</span><span class=\"mtk1\"> === </span><span class=\"mtk12\">apolloErrorType</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  });</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">doesIncludeAuthenticationError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\">): </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">doesIncludeErrorType</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">, </span><span class=\"mtk17\">&quot;UNAUTHENTICATED&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">doesIncludeForbiddenError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\">): </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">doesIncludeErrorType</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">, </span><span class=\"mtk17\">&quot;FORBIDDEN&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">doesIncludeInternalServerError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\">): </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk10\">doesIncludeErrorType</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">, </span><span class=\"mtk17\">&quot;INTERNAL_SERVER_ERROR&quot;</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span>\n<span class=\"grvsc-line\"></span>\n<span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk10\">DefaultError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">props</span><span class=\"mtk1\">: { </span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">ApolloError</span><span class=\"mtk1\"> }) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">props</span><span class=\"mtk1\">.</span><span class=\"mtk12\">error</span><span class=\"mtk1\">.</span><span class=\"mtk12\">networkError</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk9\">NetworkError</span><span class=\"mtk1\"> /&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">doesIncludeAuthenticationError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">props</span><span class=\"mtk1\">.</span><span class=\"mtk12\">error</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk9\">Redirect</span><span class=\"mtk1\"> </span><span class=\"mtk9\">to</span><span class=\"mtk1\">={</span><span class=\"mtk9\">routePaths</span><span class=\"mtk1\">.</span><span class=\"mtk9\">SIGN_IN</span><span class=\"mtk1\">} /&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">doesIncludeForbiddenError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">props</span><span class=\"mtk1\">.</span><span class=\"mtk12\">error</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk9\">ForbiddenError</span><span class=\"mtk1\"> /&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk10\">doesIncludeInternalServerError</span><span class=\"mtk1\">(</span><span class=\"mtk12\">props</span><span class=\"mtk1\">.</span><span class=\"mtk12\">error</span><span class=\"mtk1\">)) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk9\">InternalServerError</span><span class=\"mtk1\"> /&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  } </span><span class=\"mtk14\">else</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk9\">UnknownError</span><span class=\"mtk1\"> /&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>With this setup to every component that might experience errors we have to import only <em>DefaultError</em> component.</p>\n<p>In the last section let’s see how non-GraphQL errors can be handled.</p>\n<h2>3. Handling non-GraphQL errors</h2>\n<p>While not a main subject of this post, for completeness let’s shortly cover how to handle other, non-GraphQL-related errors. We can also divide them into two categories: errors thrown in UI and errors thrown in imperative code.</p>\n<p>For handling the first category of errors React provides <a href=\"https://reactjs.org/docs/error-boundaries.html\">error boundaries</a> that allow to catch errors in their child components, log errors and display a fallback UI. To provide higher granularity error boundaries can be nested, in such a case an error will be caught by the error boundary that is the closest parent of the component that generated an error. An error boundary can look like this:</p>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk14\">export</span><span class=\"mtk1\"> </span><span class=\"mtk4\">class</span><span class=\"mtk1\"> </span><span class=\"mtk9\">ErrorBoundary</span><span class=\"mtk1\"> </span><span class=\"mtk4\">extends</span><span class=\"mtk1\"> </span><span class=\"mtk9\">React</span><span class=\"mtk1\">.</span><span class=\"mtk9\">Component</span><span class=\"mtk1\">&lt;{}, { </span><span class=\"mtk12\">hasError</span><span class=\"mtk1\">: </span><span class=\"mtk9\">boolean</span><span class=\"mtk1\"> }&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">constructor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">props</span><span class=\"mtk1\">: {}) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">super</span><span class=\"mtk1\">(</span><span class=\"mtk12\">props</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\"> = { </span><span class=\"mtk12\">hasError:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">false</span><span class=\"mtk1\"> };</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk4\">static</span><span class=\"mtk1\"> </span><span class=\"mtk10\">getDerivedStateFromError</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk3\">// Update state so the next render will show the fallback UI:</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">hasError:</span><span class=\"mtk1\"> </span><span class=\"mtk4\">true</span><span class=\"mtk1\"> };</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">componentDidCatch</span><span class=\"mtk1\">(</span><span class=\"mtk12\">error</span><span class=\"mtk1\">: </span><span class=\"mtk9\">Error</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk12\">logger</span><span class=\"mtk1\">.</span><span class=\"mtk10\">error</span><span class=\"mtk1\">(</span><span class=\"mtk12\">functionPath</span><span class=\"mtk1\">, </span><span class=\"mtk17\">`error: </span><span class=\"mtk4\">${</span><span class=\"mtk9\">JSON</span><span class=\"mtk18\">.</span><span class=\"mtk10\">stringify</span><span class=\"mtk18\">(</span><span class=\"mtk12\">error</span><span class=\"mtk18\">)</span><span class=\"mtk4\">}</span><span class=\"mtk17\">`</span><span class=\"mtk1\">);</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk10\">render</span><span class=\"mtk1\">() {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">state</span><span class=\"mtk1\">.</span><span class=\"mtk12\">hasError</span><span class=\"mtk1\">) {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk3\">// Render fallback UI:</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">      </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> &lt;</span><span class=\"mtk9\">UnknownError</span><span class=\"mtk1\"> /&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">    </span><span class=\"mtk14\">return</span><span class=\"mtk1\"> </span><span class=\"mtk4\">this</span><span class=\"mtk1\">.</span><span class=\"mtk12\">props</span><span class=\"mtk1\">.</span><span class=\"mtk12\">children</span><span class=\"mtk1\">;</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">}</span></span></code></pre>\n<p>In case of errors in imperative code:</p>\n<ul>\n<li>for synchronous code we can handle them by simply surrounding places where they may occur with regular try/catch block,</li>\n<li>for asynchronous code we can also use try/catch block with async/await construct or we can register error handling callback either using <em>catch</em> method or as a second argument to <em>then</em> method at the end of promises’ chain. As a last resort, global event handler can be added for <em>unhandledrejection</em> event in one of the following ways:</li>\n</ul>\n<pre class=\"grvsc-container grvsc-container-additional light-default-light\" data-language=\"typescript\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"mtk12\">window</span><span class=\"mtk1\">.</span><span class=\"mtk10\">addEventListener</span><span class=\"mtk1\">(</span><span class=\"mtk17\">&quot;unhandledrejection&quot;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">event</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// handle event here</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">});</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk12\">window</span><span class=\"mtk1\">.</span><span class=\"mtk10\">onunhandledrejection</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">event</span><span class=\"mtk1\">: </span><span class=\"mtk9\">PromiseRejectionEvent</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">  </span><span class=\"mtk3\">// handle event here</span></span>\n<span class=\"grvsc-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<h3>Summary</h3>\n<p>Let’s summarize, as a result of implemented changes the client application properly handles GraphQL and non-GraphQL errors, in component and global scope, in imperative and declarative way. And although errors are not part of GraphQL schema, by sharing error types between server and client the system obtained type safety also in error handling area.</p>\n<style class=\"grvsc-styles\">\n  :root {\n    --grvsc-padding-v: 1rem;\n    --grvsc-padding-h: 1.5rem;\n    --grvsc-padding-top: var(--grvsc-padding-v);\n    --grvsc-padding-right: var(--grvsc-padding-h);\n    --grvsc-padding-bottom: var(--grvsc-padding-v);\n    --grvsc-padding-left: var(--grvsc-padding-h);\n    --grvsc-border-radius: 8px;\n  \n    --grvsc-line-highlighted-background-color: transparent;\n    --grvsc-line-highlighted-border-width: 4px;\n    --grvsc-line-highlighted-border-color: transparent;\n  }\n  \n  .grvsc-container {\n    overflow: auto;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top);\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom);\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius);\n    font-feature-settings: normal;\n  }\n  \n  .grvsc-code {\n    display: inline-block;\n    min-width: 100%;\n  }\n  \n  .grvsc-line {\n    display: inline-block;\n    box-sizing: border-box;\n    width: 100%;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left);\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right);\n  }\n  \n  .grvsc-line-highlighted {\n    background-color: var(--grvsc-line-highlighted-background-color);\n    box-shadow: inset var(--grvsc-line-highlighted-border-width) 0 0 0 var(--grvsc-line-highlighted-border-color);\n  }\n  \n  .light-default-light {\n    background-color: #FFFFFF;\n    color: #000000;\n  }\n  .light-default-light .mtk14 { color: #AF00DB; }\n  .light-default-light .mtk1 { color: #000000; }\n  .light-default-light .mtk4 { color: #0000FF; }\n  .light-default-light .mtk12 { color: #001080; }\n  .light-default-light .mtk9 { color: #267F99; }\n  .light-default-light .mtk10 { color: #795E26; }\n  .light-default-light .mtk3 { color: #008000; }\n  .light-default-light .mtk17 { color: #A31515; }\n  .light-default-light .mtk7 { color: #09885A; }\n  .light-default-light .mtk18 { color: #000000FF; }\n</style>","frontmatter":{"title":"Error handling with Apollo Client","date":"February 08, 2020"}}},"pageContext":{"next":null,"previous":{"fields":{"slug":"/error-handling-with-apollo-server/"},"frontmatter":{"title":"Error handling with Apollo Server"}},"slug":"/error-handling-with-apollo-client/"}}}